#!/usr/bin/env python
"""
Flush control for ep-engine.

Copyright (c) 2010  Dustin Sallings <dustin@spy.net>
"""
import time

import clitool

import mc_bin_client

def auth(mc, username, password):
    if username:
        mc.sasl_auth_plain(username, password)

def get_kvs(mc, kvstore):
    success = False
    try:
        stats = mc.stats('kvstore')
        success = True
        num_kvs = int(stats['num_kvstores'])
    except:
        if success:
            import mc_bin_client
            mc = mc_bin_client.MemcachedClient(mc.host, mc.port)
            raise
        else:
            raise
    kvstore = kvstore.strip()
    kvrange = [str(kv) for kv in range(num_kvs)]
    if kvstore == '':
        return kvrange
    if kvstore not in kvrange:
        print "Kvstore %s not in range. Engine has %d kvstores." % (kvstore, num_kvs)
        return []
    return [kvstore]

def stop(mc, kvstore='', username=None, password=""):
    auth(mc, username, password)
    kvs = get_kvs(mc, kvstore)
    for kv in kvs:
        mc.stop_persistence(kv)

    # Now poll each kvstore
    while len(kvs) > 0:
        success = False
        try:
            stats = mc.stats()
            success = True
        except:
            if success:
                import mc_bin_client
                mc = mc_bin_client.MemcachedClient(mc.host, mc.port)
                raise
            else:
                raise
        # Obtain stats just once for multiple kvstore checks
        while len(kvs) > 0:
            kv = kvs.pop()
            if stats['ep_flusher_state_' + kv] != 'paused':
                kvs.append(kv)
                time.sleep(0.5)
                break

def start(mc, kvstore='', username=None, password=""):
    auth(mc, username, password)
    kvs = get_kvs(mc, kvstore)
    for kv in kvs:
        mc.start_persistence(kv)

def set_param(mc, key, val, username=None, password=""):
    auth(mc, username, password)
    mc.set_flush_param(key, val)

def evict(mc, key, username=None, password=""):
    auth(mc, username, password)
    mc.evict_key(key)

if __name__ == '__main__':

    c = clitool.CliTool("""
All commands allow an optional username and password as the last
two parameters.

Persistence:
    stop <KVID>    - stop persistence
    start <KVID>   - start persistence
    Note: Not providing KVID performs op on all kvstores.

Available params for "set":
    enable_flushall           - enable the flush_all command (false by default)
    min_data_age              - minimum data age before flushing data
    queue_age_cap             - maximum queue age before flushing data
    max_txn_size              - maximum number of items in a flusher transaction
    bg_fetch_delay            - delay before executing a bg fetch (test feature)
    max_size                  - max memory used by the server
    mem_high_wat              - high water mark
    mem_low_wat               - low water mark
    exp_pager_stime           - Expiry Pager Sleeptime
    chk_max_items             - Max no of keys after which a checkpoint will be closed ( Valid range 100 - 500000)
    chk_period                - Max time period after which a checkpoint will be closed (Valid range 60s - 3600s)
    keep_closed_chks          - Flag to keep closed checkpoints in memory ( True / False )
    inconsistent_slave_chk    - Setting this to true will disable checkpoint creation ( True / False )
    lru_rebuild_stime         - LRU rebuild Sleeptime
    enable_eviction_histograms- Whether to produce and print eviction related histograms ( True / False )
    max_evict_entries         - Maximum entries used by eviction job
    enable_eviction_job       - Enable or Disable eviction job
    eviction_policy           - Change the eviction policy 
    eviction_headroom         - Change the headroom to be kept aside through eviction
    eviction_quantum_size     - Change the eviction quantum size in bytes
    eviction_quantum_max_count- Change the maximum number of quanta that might be evicted at once
    eviction_quiet_period     - Max duration in seconds for which eviction is stopped when rss reaches max_size
    disable_inline_eviction   - Disable inline eviction
    prune_lru_age             - Prune keys that are older than the speificed timestamp
    lru_rebuild_percent       - Rebuild LRU when no. of items in the queue reaches the percent
    lru_mem_threshold_percent - Do not rebuild LRU if mem_used has not reached the percent of max_size
    evict_min_blob_size       - Only evict entries that are bigger than this size
    bf_max_list_size          - Maximum number of items to have in backfill list during disk load
    bf_disk_sleep_time        - Set sleep time value for backfill disk load delaying (Valid range 0 - 7200)
    bf_disk_sleep_enable      - Enable sleeping on KVStore specified (Valid range 0 - numKVStores-1)
    bf_disk_sleep_disable     - Disable sleeping on KVStore specified (Valid range 0 - numKVStores-1)
    bf_resident_threshold     - Resident percentage threshold below which disk backfill will trigger (Valid range 0.7 - 1.0)
    bf_num_keys_threshold     - Threshold number of keys above which disk backfill will trigger (Valid range 0 - inf)
    scrub_memory              - Scrub allocator's memory to release as much memory as possible back to OS
    allocator_stats           - Print allocator stats """)

    c.addCommand('stop', stop, 'stop')
    c.addCommand('start', start, 'start')
    c.addCommand('set', set_param, 'set param value')
    c.addCommand('evict', evict, "evict key")

    try:
        c.execute()
    except mc_bin_client.MemcachedError, e:
        print "Failed: ", e.msg

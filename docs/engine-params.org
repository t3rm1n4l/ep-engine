#+TITLE:     EP Parameters
#+AUTHOR:    Dustin Sallings
#+EMAIL:     dustin@spy.net
#+DATE:      2010-05-05 Wed
#+DESCRIPTION:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Configuring the Engine

Engine parameters may be specified using the =-e= option to
memcached.  These parameters control various aspects of the behavior
of the engine.

For example, if you would like to store your database in =/data/base=
and prevent it from having objects larger than 1MB, you would run
memcached like this:

: memcached -E ep.so -e 'kvstore_config_file=/etc/kvconf.json;max_item_size=1048576'

* Parameters for the EP Engine

| key                    | type   | descr                                      |
|------------------------+--------+--------------------------------------------|
| config_file            | string | Path to additional parameters.             |
| kvstore_config_file    | string | Path to kvstore config file that is in     |
|                        |        | JSON format (see below).                   |
| ht_locks               | int    | Number of locks per hash table.            |
| ht_size                | int    | Number of buckets per hash table.          |
| max_item_size          | int    | Maximum number of bytes allowed for        |
|                        |        | an item.                                   |
| max_size               | int    | Max cumulative item size in bytes.         |
| max_txn_size           | int    | Max number of disk mutations per           |
|                        |        | transaction.                               |
| mem_high_wat           | int    | Automatically evict when exceeding         |
|                        |        | this size.                                 |
| mem_low_wat            | int    | Low water mark to aim for when evicting.   |
| min_data_age           | int    | Minimum data stability time before         |
|                        |        | persist.                                   |
| queue_age_cap          | int    | Maximum queue time before forcing persist. |
| tap_backlog_limit      | int    | Max number of items allowed in a           |
|                        |        | tap backfill                               |
| tap_noop_interval      | int    | Number of seconds between a noop is sent   |
|                        |        | on an idle connection                      |
| tap_keepalive          | int    | Seconds to hold open named tap connections |
| tap_bg_max_pending     | int    | Maximum number of pending bg fetch         |
|                        |        | operations                                 |
|                        |        | a tap queue may issue (before it must wait |
|                        |        | for responses to appear.                   |
| tap_backoff_period     | float  | Number of seconds the tap connection       |
|                        |        | should back off after receiving ETMPFAIL   |
| vb0                    | bool   | If true, start with an active vbucket 0    |
| waitforwarmup          | bool   | Whether to block server start during       |
|                        |        | warmup.                                    |
| warmup                 | bool   | Whether to load existing data at startup.  |
| expiry_window          | int    | expiry window to not persist an object     |
|                        |        | that is expired (or will be soon)          |
| exp_pager_stime        | int    | Sleep time for the pager that purges       |
|                        |        | expired objects from memory and disk       |
| eviction_policy        | string | Eviction policy. Options to choose from    |
                         |        | ("lru", "bgeviction")                      |
| lru_rebuild_stime      | int    | Sleep time for rebuilding the lru list for |
|                        |        | eviction                                   |
| eviction_headroom      | int    | Watermark to be used by lru policy before  |
|                        |        | triggering eviction.                       |
| max_evict_entries      | int    | Maximum entries used by the LRU queues     |
| enable_eviction_job    | bool   | Enable/disable the eviction job exection   |
| disable_inline_eviction| bool   | Enable/disable inline eviction             |
| failpartialwarmup      | bool   | If false, continue running after failing   |
|                        |        | to load some records.                      |
| max_vbuckets           | int    | Maximum number of vbuckets expected (1024) |
| vb_del_chunk_size      | int    | Chunk size of vbucket deletion             |
| vb_chunk_del_time      | int    | vb chunk deletion threshold time (ms) used |
|                        |        | for adjusting the chunk size dynamically   |
| concurrentDB           | bool   | True (default) if concurrent DB reads are  |
|                        |        | permitted where possible.                  |
| chk_remover_stime      | int    | Interval for the checkpoint remover that   |
|                        |        | purges closed unreferenced checkpoints.    |
| chk_max_items          | int    | Number of max items allowed in a           |
|                        |        | checkpoint                                 |
| chk_period             | int    | Time bound (in sec.) on a checkpoint       |
| max_checkpoints        | int    | Number of max checkpoints allowed per      |
|                        |        | vbucket                                    |
| inconsistent_slave_chk | bool   | True if we allow a "downstream" master to  |
|                        |        | receive checkpoint begin/end messages      |
|                        |        | along with normal get/set operations.      |
| keep_closed_chks       | bool   | True if we want to keep closed checkpoints |
|                        |        | in memory if the current memory usage is   |
|                        |        | below high water mark                      |
| bf_resident_threshold  | float  | Resident item threshold for only memory    |
|                        |        | backfill to be kicked off                  |
| getl_default_timeout   | int    | The default timeout for a getl lock in (s) |
| getl_max_timeout       | int    | The maximum timeout for a getl lock in (s) |
| sync_cmd_timeout       | int    | The timeout for SYNC requests in (ms)      |
| mutation_mem_threshold | float  | Memory threshold on the current bucket     |
|                        |        | quota for accepting a new mutation         |
| tap_throttle_threshold | float  | Percentage of memory in use before we      |
|                        |        | throttle tap streams                       |
| restore_mode           | bool   | If true, enable online restore mode        |
|                        |        |                                            |
| restore_file_checks    | bool   | If false, disable expensive validation     |
|                        |        | checks on the backup. Results in much      |
|                        |        | faster restores.                           |

** KVStore Config file format

The kvstore config file is to be written in a JSON format with specific
parameters described below. The path to the file should be passed to memcached
using the parameter kvstore_config_file. If not specified, ep-engine uses a
default config JSON string {"kvstores":{}} which produces a single kvstore with
default values for every parameter. Since memcached will not give parse error
details, you may use the python tool at tools/check_valid_json.py and pass the
json file as argument to see if it parses it and prints correctly. In case of
a parse error, this script specifies the line/column number where the parse
failed.

The kvstore config parameter expects an object type with exactly one key by the
name "kvstores" mapping to an object containing all the kvstores that need to
be configured. Every kvstore is a mapping between a string name for the kvstore
and its configuration. The configuration for each kvstore is specified with the
following parameters:

| key                    | type   | descr                                      |
|------------------------+--------+--------------------------------------------|
| dbname                 | string | Path to on-disk storage. (default:         |
|                        |        | /tmp/test.db)                              |
| shardpattern           | string | File pattern for shards (see below)        |
|                        |        | (default: %d/%b-%i.sqlite)                 |
| initfile               | string | SQL script to run after opening DB         |
|                        |        | (default: empty string, i.e. no file)      |
| postInitfile           | string | SQL script to run after all DB shards and  |
|                        |        | statements have been initialized           |
|                        |        | (default: empty string, i.e. no file)      |
| db_shards              | int    | Number of shards for db store (default: 4) |
| db_strategy            | string | DB store strategy ("multiDB", "singleDB"   |
|                        |        | or "singleMTDB") (default: multiDB)        |
| data_dbnames           | array  | Array of strings each pointing to a db     |
|                        |        | path. Based on the number of shards, the   |
|                        |        | sharding is done on these paths in a round |
|                        |        | robin mechanism. (default: empty array)    |

dbname is where every kvstore centralizes it's store. Every data file (based
on the value of db_shards) is sharded based on the pattern specified onto the
paths given in data_dbnames. If this array is empty, the sharding is done on
dbname. The list of all dbname values and the paths resulting in sharding
across all kvstores is not allowed to have any duplicate paths. ep-engine
validates the config and fails in such a scenario.

To view the list of paths that have been generated using the shard patterns,
use "stats kvstore".

See a sample kvstore configuration below.

** Shard Patterns

When using a multi-sharded database, =shardpattern= specifies how
shards are named relative to a data path. As described above, the
data path is picked up in a round-robin way from data_dbnames for
each shard number, unless this array is empty in which case dbname
is used.

=shardpattern= uses a printf-style string to expand the path with the
given variables:

- =%d= : The directory name containing the main database
  (This will be =.= for relative paths).
- =%b= : The base name of the main database.
- =%i= : The shard number.

The default value of =shardpattern= is =%d/%b-%i.sqlite=

** Sample kvstore config

{
    "kvstores" : {
        "kvstore1" : {
            "dbname" : "/tmp/test2.db",
            "data_dbnames" : [
                "/tmp/test1.db",
                "/tmp/test2.db"
            ]
        },
        "kvstore2" : {
            "dbname" : "/tmp/test2.db-3.s"
        },
        "kv3": {},
        "kv4": {
            "dbname" : "/tmp/test5.db",
            "data_dbnames" : [
                "/tmp/t1.db",
                "/tmp/t2.db",
                "/tmp/t3.db"
            ],
            "db_shards" : 15
        }
    }
}

("kv3" obtains all the default parameter values. Note that none of
the dbname paths and shardpattern generated paths repeat.)
